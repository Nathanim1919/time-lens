generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id
  name                  String
  email                 String         @unique
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  currentPlan           String         @default("free")
  nextBillingDate       DateTime?
  polarCustomerId       String?
  subscriptionEndDate   DateTime?
  subscriptionStartDate DateTime?
  subscriptionStatus    String         @default("active")
  accounts              Account[]
  images                Image[]
  sessions              Session[]
  subscriptions         Subscription[]
  transactions          Transaction[]
  usageLogs             UsageLog[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Image {
  id           String   @id @default(uuid())
  userId       String
  originalUrl  String
  generatedUrl String
  eraTheme     String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])

  @@map("image")
}

model Subscription {
  id              String        @id
  userId          String
  planType        String
  status          String
  startDate       DateTime
  endDate         DateTime?
  nextBillingDate DateTime
  polarCustomerId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@index([userId])
  @@index([status])
  @@index([nextBillingDate])
  @@map("subscription")
}

model Transaction {
  id              String        @id
  userId          String
  subscriptionId  String?
  amountCents     Int
  currency        String        @default("USD")
  status          String
  transactionType String
  createdAt       DateTime      @default(now())
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
  @@index([createdAt])
  @@map("transaction")
}

model UsageLog {
  id                   BigInt   @id @default(autoincrement())
  userId               String
  date                 DateTime @db.Date
  transformationsCount Int      @default(0)
  planType             String
  dailyLimit           Int
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([planType])
  @@map("usage_log")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
